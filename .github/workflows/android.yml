name: Build and Release APK

on:
  push:
    branches:
      - main  # O workflow será acionado ao fazer push na branch 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Fazer checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Passo 2: Configurar o JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # Passo 3: Cache de dependências do Gradle
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Passo 4: Permitir execução do gradlew
      - name: Give execute permission to gradlew
        run: chmod +x ./gradlew

      # Passo 5: Decodificar e salvar o Keystore
      - name: Set up Keystore
        run: |
          mkdir -p app/keystore
          echo "$KEYSTORE_FILE" | base64 --decode > app/keystore/prismakeystore.jks
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}

      # Passo 6: Build do APK (assembleRelease)
      - name: Build APK
        run: ./gradlew assembleRelease

      # Passo 7: Alinhar o APK
      - name: Align APK
        run: |
          $ANDROID_HOME/build-tools/34.0.0/zipalign -v 4 app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/app-release-aligned.apk

      # Passo 8: Assinar o APK
      - name: Sign APK
        run: |
          $ANDROID_HOME/build-tools/34.0.0/apksigner sign \
          --ks app/keystore/prismakeystore.jks \
          --ks-key-alias key0prisma \
          --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
          --key-pass pass:${{ secrets.KEY_PASSWORD }} \
          --out app/build/outputs/apk/release/app-release-signed.apk \
          app/build/outputs/apk/release/app-release-aligned.apk

      # Passo 9: Criar uma release no GitHub
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: "Release v${{ github.run_number }}"
          draft: false
          prerelease: false

      # Passo 10: Fazer upload do APK assinado para a release
      - name: Upload Signed APK to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release-signed.apk
          asset_name: app-release-signed.apk
          asset_content_type: application/vnd.android.package-archive
